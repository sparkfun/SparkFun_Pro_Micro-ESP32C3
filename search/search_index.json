{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"examples/","title":"Arduino Examples","text":"<p>Now that we've installed the espressif boards package in Arduino, it's time to upload our first sketch to make sure everything is working properly.</p>"},{"location":"examples/#example-1-blink","title":"Example 1 - Blink","text":"<p>This basic example makes sure the board package installed correctly and the board accepts programming properly to blink the blue IO10 LED on the board every second. Open the example in Arduino by navigating to File &gt; Examples &gt; Basics &gt; 01-Blink.</p> <p>You will need to define LED_BUILTIN as 10 like so: </p> <p></p> <p>Code changes for LED_BUILTIN</p> <p>Make sure you have the board and port selected like so: </p> <p></p> <p>Board and Port selected</p>"},{"location":"examples/#uploading-code","title":"Uploading Code","text":"<p>Before uploading, you'll need to put the board into the serial bootloader with the BOOT button. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause the MCU to enter the Firmware Download mode and its serial bootloader. The board will remain in this mode until it power cycles (happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer with through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board. </li> </ul> </li> </ol> <p>Once the board is in the serial bootloader, you can upload code through the Arduino interface. Once your code is uploaded, you will need to hit the RST button to get your sketch running. </p> <p></p> <p>blink blink blink</p>"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print  (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_assembly/","title":"Hardware Assembly","text":"<p>The SparkFun Pro Micro ESP32-C3 could be considered \"plug and play\", depending on the project. If you want to use any of the I/O pins, however, you'll need to solder something to the board. If you've never worked with castellated headers,we recommend checking out our Castellated Mounting Holes Tutorial for more information.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <p></p> <p>SparkFun Pro Micro ESP32-C3 Connected to Programming</p>"},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#esp32-c3-wifi-module","title":"ESP32 C3 WiFi Module","text":"<p>The ESP32-C3 from Espressif is a single-core, 32-bit, RISC-V-based MCU with 400KB of SRAM, which is capable of running at 160MHz. It has integrated 2.4 GHz Wi-Fi and Bluetooth 5 (LE) with a long-range support. It has 22 programmable GPIOs with support for ADC, SPI, UART, I2C, I2S, RMT, TWAI, and PWM. More information is available in the datasheet. </p> <p></p> <p>ESP32 C3 WiFi Module</p>"},{"location":"hardware_overview/#voltage-regulator-rt9080","title":"Voltage Regulator - RT9080","text":"<p>The RT9080 regulates voltage to the various components of the board. Maximum input voltage should be no more than 5.5V. </p> <p>Current Max: 600mA</p> <p></p> <p>Voltage Regulator - RT9080</p>"},{"location":"hardware_overview/#qwiic-connector","title":"Qwiic Connector","text":"<p>The board includes a Qwiic connector for use with our vast array of Qwiic sensors. For users that need to solder directly to the board, the pins are also broken out on the edge PTH. The I<sup>2</sup>C data and clock lines are also tied to 2.2k\u03a9 pull-up resistors.</p> <p></p> <p>Qwiic Connector</p>"},{"location":"hardware_overview/#jtag","title":"JTAG","text":"<p>While most users will utilize the USB connection for programming, the ESP32-C3 can also be programmed through its JTAG or SWD pins. This is useful for individuals developing and debugging firmware that would be flashed directly onto the module, such as in production for commercial applications. We recommend soldering a 2x5 Male Pin header for use. </p> <p></p> <p>ESP32 JTAG pads</p>"},{"location":"hardware_overview/#castellated-headers","title":"Castellated Headers","text":"<p>The castellated headers along either side of the board are useful for adding complex functionality like RF to a design, as well as being low profile and compact. If you've never worked with castellated headers, head on over to our Castellated Mounting Holes Tutorial for more information. </p> <p></p> <p>Castellated Headers</p>"},{"location":"hardware_overview/#buttons","title":"Buttons","text":"<p>There are two buttons on the board - Reset and Boot. The reset (RST) button allows users to reset the program running on the ESP32-C3 module without unplugging the board. The Boot Button allows the user to manually put the board into Bootloader Mode. To enter bootloader, hold the Boot button down when the ESP32 resets or powers on. </p> <p></p> <p>Boot and Reset Buttons</p>"},{"location":"hardware_overview/#leds","title":"LEDs","text":"<p>Two LEDs - Power(Red) and STAT(Blue) - show the user that power has been appropriately supplied to the board and the status of the data transfer. </p> <p></p> <p>Power and Status LEDs</p>"},{"location":"hardware_overview/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"hardware_overview/#i2c-jumper","title":"I<sup>2</sup>C Jumper","text":"<p>If you choose to use one or more Qwiic breakouts in your project, it is important to note that this board comes equipped with pull-up resistors on the clock and data pins. If you are daisy-chaining multiple Qwiic devices, you will want to cut this jumper; if multiple sensors are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus. To disable the pull up resistors, use an X-acto knife to cut the joints between theWS jumper pads highlighted below.</p> <p></p> <p>I2C Jumpers</p>"},{"location":"hardware_overview/#led-jumpers","title":"LED Jumpers","text":"<p>If power consumption is an issue or you wish to disable the LEDs on the front of the board, cut the trace between the jumpers shown here. </p> <p></p> <p>LED Jumpers</p>"},{"location":"hardware_overview/#shield-jumper","title":"Shield Jumper","text":"<p>For most applications, the single point grounding of the USB-C connector is sufficient. However, should you run into problems with EMI/EMC, we've provided a jumper that allow you to disconnect the USB Shield from ground.</p> <p></p> <p>Shield Jumpers</p>"},{"location":"hardware_overview/#board-dimensions","title":"Board Dimensions","text":"<p>The SparkFun ESP32-C3 Pro Micro measures 0.7\" x 1.3\". </p> <p></p> <p>SparkFun ESP32-C3 Pro Micro Board Outline</p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkFun Pro Micro - ESP32-C3 SKU: DEV-23484 <p> </p> <li> <p>Don't be fooled by its miniature size; the SparkFun Pro Micro ESP32-C3 packs a punch. This micro marvel crams the powerful ESP32-C3, a single-core RISC-V powerhouse with 400KB of SRAM, into a compact 1.3in. x 0.7in. board. Clocking in at 160MHz, it's ready to tackle your projects quickly and efficiently. Forget wires and soldering headaches \u2013 the Pro Micro ESP32-C3 embraces the simplicity of the Qwiic connector. Just plug and play any Qwiic sensor and watch your projects come alive with environmental data, motion detection, or whatever your imagination conjures. And stay connected, wherever you are, with built-in WiFi and Bluetooth\u00ae 5 (LE).</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. You may already have a few of these items, feel free to modify your cart accordingly.</p> <ul> <li> <p> <p>SparkFun Pro Micro - ESP32-C3 DEV-23484</p> <li> <p> <p>Reversible USB A to C Cable - 0.8m CAB-15425</p>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we recommend checking out these tutorials before continuing.</p> <ul> <li> <p> I2C </p> </li> <li> <p> Analog vs. Digital </p> </li> <li> <p> SPI </p> </li> </ul> <p> <p></p> <p>The SparkFun Pro Micro ESP32-C3 takes advantage of the Qwiic connect system. We recommend familiarizing yourself with the Logic Levels and I<sup>2</sup>C tutorials.  Click on the banner above to learn more about Qwiic products.</p> <p> </p>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to the SparkFun ESP32-C3 Pro Micro, check out the links listed here: </p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> <li>GitHub Repository</li> </ul>"},{"location":"single_page/","title":"Hardware Overview","text":""},{"location":"single_page/#introduction","title":"Introduction","text":"<ul> <li> <p> SparkFun Pro Micro - ESP32-C3 SKU: DEV-23484 <p> </p> <li> <p>Don't be fooled by its miniature size; the SparkFun Pro Micro ESP32-C3 packs a punch. This micro marvel crams the powerful ESP32-C3, a single-core RISC-V powerhouse with 400KB of SRAM, into a compact 1.3in. x 0.7in. board. Clocking in at 160MHz, it's ready to tackle your projects quickly and efficiently. Forget wires and soldering headaches \u2013 the Pro Micro ESP32-C3 embraces the simplicity of the Qwiic connector. Just plug and play any Qwiic sensor and watch your projects come alive with environmental data, motion detection, or whatever your imagination conjures. And stay connected, wherever you are, with built-in WiFi and Bluetooth\u00ae 5 (LE).</p> <p> Purchase from SparkFun  </p> </li>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To get started, users will need a few items. You may already have a few of these items, feel free to modify your cart accordingly.</p> <ul> <li> <p> <p>SparkFun Pro Micro - ESP32-C3 DEV-23484</p> <li> <p> <p>Reversible USB A to C Cable - 0.8m CAB-15425</p>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we recommend checking out these tutorials before continuing.</p> <ul> <li> <p> I2C </p> </li> <li> <p> Analog vs. Digital </p> </li> <li> <p> SPI </p> </li> </ul> <p> <p></p> <p>The SparkFun Pro Micro ESP32-C3 takes advantage of the Qwiic connect system. We recommend familiarizing yourself with the Logic Levels and I<sup>2</sup>C tutorials.  Click on the banner above to learn more about Qwiic products.</p> <p> </p>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":""},{"location":"single_page/#esp32-c3-wifi-module","title":"ESP32 C3 WiFi Module","text":"<p>The ESP32-C3 from Espressif is a single-core, 32-bit, RISC-V-based MCU with 400KB of SRAM, which is capable of running at 160MHz. It has integrated 2.4 GHz Wi-Fi and Bluetooth 5 (LE) with a long-range support. It has 22 programmable GPIOs with support for ADC, SPI, UART, I2C, I2S, RMT, TWAI, and PWM. More information is available in the datasheet. </p> <p></p> <p>ESP32 C3 WiFi Module</p>"},{"location":"single_page/#voltage-regulator-rt9080","title":"Voltage Regulator - RT9080","text":"<p>The RT9080 regulates voltage to the various components of the board. Maximum input voltage should be no more than 5.5V. </p> <p>Current Max: 600mA</p> <p></p> <p>Voltage Regulator - RT9080</p>"},{"location":"single_page/#qwiic-connector","title":"Qwiic Connector","text":"<p>The board includes a Qwiic connector for use with our vast array of Qwiic sensors. For users that need to solder directly to the board, the pins are also broken out on the edge PTH. The I<sup>2</sup>C data and clock lines are also tied to 2.2k\u03a9 pull-up resistors.</p> <p></p> <p>Qwiic Connector</p>"},{"location":"single_page/#jtag","title":"JTAG","text":"<p>While most users will utilize the USB connection for programming, the ESP32-C3 can also be programmed through its JTAG or SWD pins. This is useful for individuals developing and debugging firmware that would be flashed directly onto the module, such as in production for commercial applications. We recommend soldering a 2x5 Male Pin header for use. </p> <p></p> <p>ESP32 JTAG pads</p>"},{"location":"single_page/#castellated-headers","title":"Castellated Headers","text":"<p>The castellated headers along either side of the board are useful for adding complex functionality like RF to a design, as well as being low profile and compact. If you've never worked with castellated headers, head on over to our Castellated Mounting Holes Tutorial for more information. </p> <p></p> <p>Castellated Headers</p>"},{"location":"single_page/#buttons","title":"Buttons","text":"<p>There are two buttons on the board - Reset and Boot. The reset (RST) button allows users to reset the program running on the ESP32-C3 module without unplugging the board. The Boot Button allows the user to manually put the board into Bootloader Mode. To enter bootloader, hold the Boot button down when the ESP32 resets or powers on. </p> <p></p> <p>Boot and Reset Buttons</p>"},{"location":"single_page/#leds","title":"LEDs","text":"<p>Two LEDs - Power(Red) and STAT(Blue) - show the user that power has been appropriately supplied to the board and the status of the data transfer. </p> <p></p> <p>Power and Status LEDs</p>"},{"location":"single_page/#jumpers","title":"Jumpers","text":"Never modified a jumper before? <p>Check out our Jumper Pads and PCB Traces tutorial for a quick introduction! <p>      How to Work with Jumper Pads and PCB Traces </p></p>"},{"location":"single_page/#i2c-jumper","title":"I<sup>2</sup>C Jumper","text":"<p>If you choose to use one or more Qwiic breakouts in your project, it is important to note that this board comes equipped with pull-up resistors on the clock and data pins. If you are daisy-chaining multiple Qwiic devices, you will want to cut this jumper; if multiple sensors are connected to the bus with the pull-up resistors enabled, the parallel equivalent resistance will create too strong of a pull-up for the bus to operate correctly. As a general rule of thumb, disable all but one pair of pull-up resistors if multiple devices are connected to the bus. To disable the pull up resistors, use an X-acto knife to cut the joints between theWS jumper pads highlighted below.</p> <p></p> <p>I2C Jumpers</p>"},{"location":"single_page/#led-jumpers","title":"LED Jumpers","text":"<p>If power consumption is an issue or you wish to disable the LEDs on the front of the board, cut the trace between the jumpers shown here. </p> <p></p> <p>LED Jumpers</p>"},{"location":"single_page/#shield-jumper","title":"Shield Jumper","text":"<p>For most applications, the single point grounding of the USB-C connector is sufficient. However, should you run into problems with EMI/EMC, we've provided a jumper that allow you to disconnect the USB Shield from ground.</p> <p></p> <p>Shield Jumpers</p>"},{"location":"single_page/#board-dimensions","title":"Board Dimensions","text":"<p>The SparkFun ESP32-C3 Pro Micro measures 0.7\" x 1.3\". </p> <p></p> <p>SparkFun ESP32-C3 Pro Micro Board Outline</p> Need more measurements? <p>For more information about the board's dimensions, users can download the Eagle files. These files can be opened in Eagle and additional measurements can be made with the dimensions tool.</p>  Eagle - Free Download! <p>Eagle is a CAD program for electronics that is free to use for hobbyists and students. However, it does require an account registration to utilize the software.</p> <p> Download fromAutodesk primary logo </p>  Dimensions Tool <p>This video from Autodesk demonstrates how to utilize the dimensions tool in Eagle, to include additional measurements:</p> <p> </p>"},{"location":"single_page/#hardware-assembly","title":"Hardware Assembly","text":"<p>The SparkFun Pro Micro ESP32-C3 could be considered \"plug and play\", depending on the project. If you want to use any of the I/O pins, however, you'll need to solder something to the board. If you've never worked with castellated headers,we recommend checking out our Castellated Mounting Holes Tutorial for more information.</p> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide.</p> <ul> <li> <p> <p>How to Solder: Through-Hole Soldering</p> <p></p> <p>SparkFun Pro Micro ESP32-C3 Connected to Programming</p>"},{"location":"single_page/#arduino-library","title":"Arduino Library","text":""},{"location":"single_page/#software-setup","title":"Software Setup","text":"<p>Arduino</p>"},{"location":"single_page/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"single_page/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"single_page/#installation-windows","title":"Installation (Windows)","text":"<p>The SparkFun Pro Micro - ESP32-C3 board files are waiting on an official release from the Espressif Arduino Core. In the meantime you can add the board files manually. There is a file included in the SparkFun_Pro_Micro-ESP32C3 Github Repository titled \"Arduino_Board_Files\", which contains a \"Variant\" folder labeled \"sparkfun_pro_micro_esp32c3\" and a \"sparkfun_boards.txt\" file. The variant file will need to be placed locaally into your machine and the contents of the \"sparkfun_boards.txt\" will need to be copied into the local \"boards.txt\" file.</p> <p>All of the Espressif Arduino Core files on your local computer can be found here on a Windows 10 machine: </p> <pre><code>C:\\Users\\&lt;USERNAME&gt;\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\n</code></pre> <p>Make sure you change USERNAME to your name! </p> <p>You'll see a folder located here with some version number depending on what you have installed. Within that folder there are directores that look like the following:</p> <p></p> <p>Core Files</p> <p>Here is where we'll \"install\" the files for the SparkFun Pro Micro ESP32-C3. First you'll take the variant folder named \"sparkfun_pro_micro_esp32c3\" and drag and drop it within the \"variants\" folder on your local machine.</p> <p>From: </p> <p></p> <p>SparkFun Variant file within Github Repository</p> <p>To: </p> <p></p> <p>SparkFun Variant file within ESP32 Variants File</p> <p>We're almost there. Next we're going to copy the text WITHIN the \"sparkfun_boards.txt\" found in the Github Repository and paste it into the \"boards.txt\" file within the Espressif Arduino Core on your local computer. First open the both the \"boards.txt\" file from you local machine and the \"sparkfun_boards.txt\". Now copy the entire text from the \"sparkfun_boards.txt\" file to the END of the \"boards.txt\" file.</p> <p></p> <p>Boards File</p> <p>That's it. Now when you go to open the Arduino IDE and navigate to the esp32 core within the boards options you should see it show up there. </p> <p></p> <p>SparkFun Pro Micro in Arduino IDE</p>"},{"location":"single_page/#arduino-examples","title":"Arduino Examples","text":""},{"location":"single_page/#icon-simplearduino","title":"icon: simple/arduino","text":"<p>Now that we've installed the espressif boards package in Arduino, it's time to upload our first sketch to make sure everything is working properly.</p>"},{"location":"single_page/#example-1-blink","title":"Example 1 - Blink","text":"<p>This basic example makes sure the board package installed correctly and the board accepts programming properly to blink the blue IO10 LED on the board every second. Open the example in Arduino by navigating to File &gt; Examples &gt; Basics &gt; 01-Blink.</p> <p>You will need to define LED_BUILTIN as 10 like so: </p> <p></p> <p>Code changes for LED_BUILTIN</p> <p>Make sure you have the board and port selected like so: </p> <p></p> <p>Board and Port selected</p>"},{"location":"single_page/#uploading-code","title":"Uploading Code","text":"<p>Before uploading, you'll need to put the board into the serial bootloader with the BOOT button. Holding down the BOOT button, while connecting the board to a computer through its USB-C connector or resetting the board will cause the MCU to enter the Firmware Download mode and its serial bootloader. The board will remain in this mode until it power cycles (happens automatically after uploading new firmware) or the RST button is pressed.</p> <ol> <li>Hold the BOOT button down.</li> <li>Reset the MCU.<ul> <li>While unpowered, connect the board to a computer with through the USB-C connection.</li> <li>While powered, press the RST button.</li> </ul> </li> <li>Release the BOOT button.</li> <li>After programming is completed, reboot the MCU.<ul> <li>Press the RST button.</li> <li>Power cycle the board. </li> </ul> </li> </ol> <p>Once the board is in the serial bootloader, you can upload code through the Arduino interface. Once your code is uploaded, you will need to hit the RST button to get your sketch running. </p> <p></p> <p>blink blink blink</p>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":""},{"location":"single_page/#resources","title":"Resources:  <p>For more resources related to the SparkFun ESP32-C3 Pro Micro, check out the links listed here: </p> <ul> <li>Product Page</li> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PDF)</li> <li>GitHub Repository</li> </ul>","text":""},{"location":"software_setup/","title":"Software Setup","text":"<p>Arduino</p>"},{"location":"software_setup/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and an library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"software_setup/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected an CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"software_setup/#installation-windows","title":"Installation (Windows)","text":"<p>The SparkFun Pro Micro - ESP32-C3 board files are waiting on an official release from the Espressif Arduino Core. In the meantime you can add the board files manually. There is a file included in the SparkFun_Pro_Micro-ESP32C3 Github Repository titled \"Arduino_Board_Files\", which contains a \"Variant\" folder labeled \"sparkfun_pro_micro_esp32c3\" and a \"sparkfun_boards.txt\" file. The variant file will need to be placed locaally into your machine and the contents of the \"sparkfun_boards.txt\" will need to be copied into the local \"boards.txt\" file.</p> <p>All of the Espressif Arduino Core files on your local computer can be found here on a Windows 10 machine: </p> <pre><code>C:\\Users\\&lt;USERNAME&gt;\\AppData\\Local\\Arduino15\\packages\\esp32\\hardware\\esp32\n</code></pre> <p>Make sure you change USERNAME to your name! </p> <p>You'll see a folder located here with some version number depending on what you have installed. Within that folder there are directores that look like the following:</p> <p></p> <p>Core Files</p> <p>Here is where we'll \"install\" the files for the SparkFun Pro Micro ESP32-C3. First you'll take the variant folder named \"sparkfun_pro_micro_esp32c3\" and drag and drop it within the \"variants\" folder on your local machine.</p> <p>From: </p> <p></p> <p>SparkFun Variant file within Github Repository</p> <p>To: </p> <p></p> <p>SparkFun Variant file within ESP32 Variants File</p> <p>We're almost there. Next we're going to copy the text WITHIN the \"sparkfun_boards.txt\" found in the Github Repository and paste it into the \"boards.txt\" file within the Espressif Arduino Core on your local computer. First open the both the \"boards.txt\" file from you local machine and the \"sparkfun_boards.txt\". Now copy the entire text from the \"sparkfun_boards.txt\" file to the END of the \"boards.txt\" file.</p> <p></p> <p>Boards File</p> <p>That's it. Now when you go to open the Arduino IDE and navigate to the esp32 core within the boards options you should see it show up there. </p> <p></p> <p>SparkFun Pro Micro in Arduino IDE</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#improve-our-documentation","title":"Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SparkFun Pro Micro ESP32-C3 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#improve-our-hardware-design","title":"Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Pro Micro ESP32-C3 repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors","title":"Contributors","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SparkFun Pro Micro ESP32-C3 repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SparkFun Pro Micro ESP32-C3 repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"}]}